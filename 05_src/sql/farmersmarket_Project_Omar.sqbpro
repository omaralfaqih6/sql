<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="farmersmarket.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="7306"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/><expanded_item id="4" parent="1"/></tab_structure><tab_browse><table title="temp.new_vendor" custom_title="0" dock_id="5" table="4,10:tempnew_vendor"/><dock_state state="000000ff00000000fd0000000100000002000005260000038bfc0100000003fb000000160064006f0063006b00420072006f00770073006500310100000000000005260000000000000000fb000000160064006f0063006b00420072006f00770073006500340100000000ffffffff0000000000000000fb000000160064006f0063006b00420072006f00770073006500350100000000000005260000010b00ffffff000005260000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="booth" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="104"/><column index="2" value="125"/><column index="3" value="300"/><column index="4" value="83"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customer_purchases" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="80"/><column index="2" value="73"/><column index="3" value="91"/><column index="4" value="91"/><column index="5" value="62"/><column index="6" value="184"/><column index="7" value="119"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="temp" name="new_vendor" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="73"/><column index="2" value="170"/><column index="3" value="157"/><column index="4" value="178"/><column index="5" value="175"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="vendor" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="73"/><column index="2" value="170"/><column index="3" value="157"/><column index="4" value="178"/><column index="5" value="175"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="vendor_booth_assignments" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="74"/><column index="2" value="106"/><column index="3" value="92"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="vendor_inventory" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="91"/><column index="2" value="62"/><column index="3" value="74"/><column index="4" value="81"/><column index="5" value="98"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- SELECT

-- selecting everything from customer
SELECT *
FROM customer;

-- add a static VALUE
SELECT 2025 as this_year, 'April' as this_month, customer_id
FROM customer
LIMIT 10;

-- add an order by + LIMIT
SELECT *
FROM customer
ORDER BY customer_last_name
LIMIT 10;

</sql><sql name="SQL 2">-- WHERE
SELECT * FROM customer
WHERE customer_id = 1
OR customer_id = 2; -- 1 or 2
-- AND customer_id = 2 -- returns NOTHING

-- IN
SELECT * FROM customer_purchases
WHERE customer_id IN (3,4,5) -- only customer 3,4,5
AND vendor_id IN (3,4,5); -- only vendor 3,4,5

-- like
-- all of the peppers
SELECT * FROM product
WHERE product_name LIKE '%pepper%';

-- customers with a last name starting with a 
SELECT * FROM customer
WHERE customer_last_name LIKE 'a%';

SELECT * FROM product
WHERE product_size IS NULL
OR product_size = '' -- two single quotes, &quot;blank&quot; -- different than null 
</sql><sql name="SQL 3">-- CASE

SELECT *
, CASE WHEN vendor_type = 'Fresh Focused'
	THEN 'Wednesday'
WHEN vendor_type = 'Prepared Foods'
	THEN 'Thursday'
ELSE 'Saturday'
END AS day_of_specialty
--pie day, otherwise nothing 
,CASE WHEN vendor_name LIKE	'%pie%'
	THEN 'Wednesday'
END as only_pie_day
,CASE WHEN vendor_name = &quot;Annies Pies&quot;
	THEN 'annie is best'
END AS feedback

FROM vendor</sql><sql name="SQL 4">--DISTINCT
--without DISTINCT, 4221 rows, of various customer_ids
SELECT customer_id FROM customer_purchases;

-- with DISTINCT, one row per customer, 26 rows total 
SELECT DISTINCT customer_id FROM customer_purchases;

--without DISTINCT, only wed/sat 150 times over
SELECT market_day
FROM market_date_info;

--market is open sat/wed!
SELECT DISTINCT market_day
FROM market_date_info;

/*which vendor has sold products to a customer*/
SELECT DISTINCT vendor_id
FROM customer_purchases; --3 rows, vendor_id 7,8,4

/*which vendor has sold products to a customer AND which product was it... */
Select DISTINCT vendor_id, product_id
FROM customer_purchases; --8 rows 

/* which vendor has sold products to a customer AND which product was it AND to whom was it sold ? */
SELECT DISTINCT vendor_id,product_id, customer_id
FROM customer_purchases --200 rows 
ORDER BY product_id ASC, customer_id DESC;
</sql><sql name="SQL 5">

-- INNER JOIN
-- no alias INNER JOIN

/* get product names alongside customer_purchases...only products that a customer has purchased will be present */
SELECT 
product_name, -- coming from product
vendor_id, -- coming from cp...below
market_date,
customer_id,
customer_purchases.product_id

FROM customer_purchases
INNER JOIN product
	ON customer_purchases.product_id = product.product_id;
	
/* which vendor has sold products to a customer AND which product was it AND to whom was it sold ? */
SELECT DISTINCT vendor_id, 
product_id, 
--customer_id -- this is dissatisfying...let's have a name!
customer_first_name,
customer_last_name

FROM customer_purchases as cp
INNER JOIN customer as c
	ON cp.customer_id = c.customer_id

	
/* which vendor has sold products to a customer AND which product was it AND to whom was it sold ? */
SELECT DISTINCT 
--vendor_id, 
vendor_name,
--product_id, 
product_name,
--customer_id -- this is dissatisfying...let's have a name!
customer_first_name,
customer_last_name

FROM customer_purchases as cp
INNER JOIN customer as c
	ON cp.customer_id = c.customer_id
INNER JOIN vendor as v
	ON cp.vendor_id = v.vendor_id
INNER JOIN product as p
	ON cp.product_id = p.product_id;

SELECT DISTINCT 
market_date,
--vendor_id, 
vendor_name,
--product_id, 
product_name,
--customer_id -- this is dissatisfying...let's have a name!
customer_first_name,
customer_last_name

FROM customer_purchases as cp
INNER JOIN customer as c
	ON cp.customer_id = c.customer_id
INNER JOIN vendor as v
	ON cp.vendor_id = v.vendor_id
INNER JOIN product as p
	ON cp.product_id = p.product_id
	
ORDER BY customer_first_name, customer_last_name, product_name, market_date</sql><sql name="SQL 6">-- count

-- count the number of products

SELECT Count (Product_id) as num_of_product
FROM product;

-- how many products PER product_qty_type
SELECT product_qty_type, COUNT(product_id) as num_of_product
FROM product
GROUP BY product_qty_type;

--how many productr per Product_qty_type and PER their product_size

SELECT product_size, product_qty_type, COUNT(product_id) as num_of _product
FROM product 
Group BY product_Size,	product_qty_type</sql><sql name="SQL 7">-- SUM &amp; avg

SELECT *
From customer_purchases;</sql><sql name="SQL 8">--TEMP tables

--if a table named &quot;new_vendor_inventory&quot; exists, delete it, otherwise do NOTHING
DROP TABLE IF EXISTS new_vendor_inventory;

--make the TABLE
CREATE TEMP TABLE new_vendor_inventory AS

--definition of the table 
SELECT *,
original_price*5 as inflation
FROM vendor_inventory;

-- put

DROP Table if EXISTS new_new_vendor_inventory;

CREATE TABLE TEMP.new_new_vendor_inventory AS
SELECT *
,inflation*2 as super_inflation
from TEMP.new_vendor_inventory;
</sql><sql name="SQL 9">/* ASSIGNMENT 1 */
/* SECTION 2 */
--SELECT
/* 1. Write a query that returns everything in the customer table. */
select *
FROM customer
order by customer_last_name, customer_first_name
limit 10;

--WHERE
/* 1. Write a query that returns all customer purchases of product IDs 4 and 9. */
-- option 1
SELECT *
FROM customer_purchases
WHERE product_id = '4' 
OR product_id = '9' ;

-- option 2
SELECT *
FROM customer_purchases
WHERE product_id IN ('4','9') ;

/*2. Write a query that returns all customer purchases and a new calculated column 'price' (quantity * cost_to_customer_per_qty), 
filtered by vendor IDs between 8 and 10 (inclusive) using either:
	1.  two conditions using AND
	2.  one condition using BETWEEN
*/
-- option 1
SELECT *, quantity*cost_to_customer_per_qty as price
FROM customer_purchases
WHERE vendor_id &gt;= 8
AND vendor_id &lt;= 10;

-- option 2
SELECT *, quantity*cost_to_customer_per_qty as price
FROM customer_purchases
WHERE vendor_id between 8 AND 10;


--CASE
/* 1. Products can be sold by the individual unit or by bulk measures like lbs. or oz. 
Using the product table, write a query that outputs the product_id and product_name
columns and add a column called prod_qty_type_condensed that displays the word “unit” 
if the product_qty_type is “unit,” and otherwise displays the word “bulk.” */

SELECT product_id, product_name,
CASE
		WHEN product_qty_type = 'unit' THEN 'unit'
		ELSE 'bulk'
END AS prod_qty_type_condensed
FROM product;

/* 2. We want to flag all of the different types of pepper products that are sold at the market. 
add a column to the previous query called pepper_flag that outputs a 1 if the product_name 
contains the word “pepper” (regardless of capitalization), and otherwise outputs 0. */

SELECT product_id, product_name,
CASE
		WHEN product_qty_type = 'unit' THEN 'unit'
		ELSE 'bulk'
END AS prod_qty_type_condensed
,CASE 
		WHEN product_name like '%pepper%' THEN '1'
		ELSE '0'
END AS pepper_flag
FROM product;

--JOIN
/* 1. Write a query that INNER JOINs the vendor table to the vendor_booth_assignments table on the 
vendor_id field they both have in common, and sorts the result by vendor_name, then market_date. */

SELECT 
vendor_name, -- coming from vendor
vendor_booth_assignments.vendor_id,
market_date

FROM vendor_booth_assignments
INNER JOIN vendor
	ON vendor_booth_assignments.vendor_id = vendor.vendor_id
ORDER by vendor_name,market_date;

/* SECTION 3 */

-- AGGREGATE
/* 1. Write a query that determines how many times each vendor has rented a booth 
at the farmer’s market by counting the vendor booth assignments per vendor_id. */

SELECT 
vendor_name, -- coming from vendor
vendor_booth_assignments.vendor_id,
count(vendor_booth_assignments.vendor_id) as Count_Booth_per_vendor_id

FROM vendor_booth_assignments
INNER JOIN vendor
	ON vendor_booth_assignments.vendor_id = vendor.vendor_id
GROUP by vendor_name;

/* 2. The Farmer’s Market Customer Appreciation Committee wants to give a bumper 
sticker to everyone who has ever spent more than $2000 at the market. Write a query that generates a list 
of customers for them to give stickers to, sorted by last name, then first name. 

HINT: This query requires you to join two tables, use an aggregate function, and use the HAVING keyword. */

SELECT
customer_first_name,
customer_last_name,
round(sum(cost_to_customer_per_qty*quantity)) as total_charges_per_customer

FROM customer_purchases
INNER JOIN customer
	ON customer_purchases.customer_id = customer.customer_id
GROUP by customer_purchases.customer_id
HAVING total_charges_per_customer &gt; 2000
ORDER by customer_last_name, customer_first_name;

--Temp Table
/* 1. Insert the original vendor table into a temp.new_vendor and then add a 10th vendor: 
Thomass Superfood Store, a Fresh Focused store, owned by Thomas Rosenthal

HINT: This is two total queries -- first create the table from the original, then insert the new 10th vendor. 
When inserting the new vendor, you need to appropriately align the columns to be inserted 
(there are five columns to be inserted, I've given you the details, but not the syntax) 

-&gt; To insert the new row use VALUES, specifying the value you want for each column:
VALUES(col1,col2,col3,col4,col5) 
*/
--Delete an already existing temporary file if it exists
DROP TABLE IF EXISTS temp.new_vendor;

--Create temporary table based on vendor table
CREATE TABLE temp.new_vendor AS
select *
FROM vendor;

--Insert the new 10th vendor
INSERT INTO temp.new_vendor (vendor_id,vendor_name,vendor_type,vendor_owner_first_name,vendor_owner_last_name)
VALUES ('10','Thomass Superfood Store','Fresh Focused','Thomas','Rosenthal');

-- Date
/*1. Get the customer_id, month, and year (in separate columns) of every purchase in the customer_purchases table.

HINT: you might need to search for strfrtime modifers sqlite on the web to know what the modifers for month 
and year are! */

SELECT
customer_id,
strftime('%Y',market_date) as purchase_year,
strftime('%m',market_date) as purchase_month

FROM customer_purchases;

/* 2. Using the previous query as a base, determine how much money each customer spent in April 2022. 
Remember that money spent is quantity*cost_to_customer_per_qty. 

HINTS: you will need to AGGREGATE, GROUP BY, and filter...
but remember, STRFTIME returns a STRING for your WHERE statement!! */

SELECT
customer_id,
strftime('%Y',market_date) as purchase_year,
strftime('%m',market_date) as purchase_month,
round(sum(quantity*cost_to_customer_per_qty),2) as money_spent
from customer_purchases 
WHERE purchase_year = '2022' 
AND purchase_month = '04'
GROUP by customer_id


	






</sql><current_tab id="8"/></tab_sql></sqlb_project>
